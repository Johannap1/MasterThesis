Research assignment:
- Create planning for next quarter (first weeks detailed, thereafter a bit more vague)
- SysID for physical drone control:
-- Find out what to know (MPC model)
-- Find out how to know (Git repository similar to bebop2_toolbox and bebop-identification)
- Contribute to the drone_toolbox repo
- Attach components to drone together with Ehsan:
-- Companion computer, camera and rotor guards
- Figure out how to program companion computer and interface it with FMU
- Tune PX4 controllers if needed
- Create lab setup with real drone (CoR lab/MAVlab/DCSC?)

Literature study:
- LBMPC methods
- MHE
- What does PX4 already contain for counteracting wind disturbances? -> Does there exist a reference for it and can we use it as a benchmark?

Thesis:
- Implement LBMPC with:
-- MHE?
-- Brain-inspired model learning, together with Ajith?
- Perform benchmark comparison in Gazebo (with simulator Michiel)
- Perform benchmark comparison in lab
- Deliverables:
-- Write a paper and add appendices to it in your thesis
-- Contribute to the drone_toolbox repo


Project management:
- You have to send meeting invites involving the people as will be discussed during the meetings and prepare the content to be discussed -> meeting notes and plots if necessary
- I will be available on daily basis to answer your questions and help you getting started with the software
- Use MS Teams as main communication channel (no email, except when Tamas wants to be involved that way)

Software setup:
- Ubuntu 20.04 LTS
- ROS Noetic
- See workspace guide
-- drone_toolbox repo: goal is to create a drone_toolbox repository where we can add all system identification, control, simulation and experimental code, together with READMEs, such that it can be easily reproduced by others (e.g. photos of setups).


Next steps:
- Software installation (Ubuntu, ROS, Visual Studio Code, Python, C++, Git, read in PX4 user guide how to setup environment, request ForcesPro license (https://www.embotech.com/products/forcespro/licensing/ - Academic licenses))
- Check out control code in PX4 repo:
-- Create a block diagram with control signal flows in PX4 to arrive at the final ESC control
-- Indicate what the highest-level controller can be (onboard/offboard control) and how this communication can be established
- Check ROS tutorials (http://wiki.ros.org/ROS/Tutorials) if you don't have experience with ROS. Otherwise, just use it as a reference whenever you need it
- Next meeting: 10-11-2021 09:00 (together with Michiel)
